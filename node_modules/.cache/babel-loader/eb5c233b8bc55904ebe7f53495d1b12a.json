{"ast":null,"code":"import { BufferAttribute } from 'three';\nimport MeshBVHNode from './MeshBVHNode.js';\nimport { boxToArray, getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds } from './Utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST } from './Constants.js'; // https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\n\nconst FLOAT32_EPSILON = Math.pow(2, -24);\n\nfunction ensureIndex(geo) {\n  if (!geo.index) {\n    const vertexCount = geo.attributes.position.count;\n    const index = new (vertexCount > 65535 ? Uint32Array : Uint16Array)(vertexCount);\n    geo.setIndex(new BufferAttribute(index, 1));\n\n    for (let i = 0; i < vertexCount; i++) {\n      index[i] = i;\n    }\n  }\n} // Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\n\n\nfunction getRootIndexRanges(geo) {\n  if (!geo.groups || !geo.groups.length) {\n    return [{\n      offset: 0,\n      count: geo.index.count / 3\n    }];\n  }\n\n  const ranges = [];\n  const rangeBoundaries = new Set();\n\n  for (const group of geo.groups) {\n    rangeBoundaries.add(group.start);\n    rangeBoundaries.add(group.start + group.count);\n  } // note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\n\n  const sortedBoundaries = Array.from(rangeBoundaries.values()).sort((a, b) => a - b);\n\n  for (let i = 0; i < sortedBoundaries.length - 1; i++) {\n    const start = sortedBoundaries[i],\n          end = sortedBoundaries[i + 1];\n    ranges.push({\n      offset: start / 3,\n      count: (end - start) / 3\n    });\n  }\n\n  return ranges;\n} // computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\n\n\nfunction getBounds(triangleBounds, offset, count, target, centroidTarget = null) {\n  let minx = Infinity;\n  let miny = Infinity;\n  let minz = Infinity;\n  let maxx = -Infinity;\n  let maxy = -Infinity;\n  let maxz = -Infinity;\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n  const includeCentroid = centroidTarget !== null;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    const hx = triangleBounds[i + 1];\n    const lx = cx - hx;\n    const rx = cx + hx;\n    if (lx < minx) minx = lx;\n    if (rx > maxx) maxx = rx;\n    if (includeCentroid && cx < cminx) cminx = cx;\n    if (includeCentroid && cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    const hy = triangleBounds[i + 3];\n    const ly = cy - hy;\n    const ry = cy + hy;\n    if (ly < miny) miny = ly;\n    if (ry > maxy) maxy = ry;\n    if (includeCentroid && cy < cminy) cminy = cy;\n    if (includeCentroid && cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    const hz = triangleBounds[i + 5];\n    const lz = cz - hz;\n    const rz = cz + hz;\n    if (lz < minz) minz = lz;\n    if (rz > maxz) maxz = rz;\n    if (includeCentroid && cz < cminz) cminz = cz;\n    if (includeCentroid && cz > cmaxz) cmaxz = cz;\n  }\n\n  target[0] = minx;\n  target[1] = miny;\n  target[2] = minz;\n  target[3] = maxx;\n  target[4] = maxy;\n  target[5] = maxz;\n\n  if (includeCentroid) {\n    centroidTarget[0] = cminx;\n    centroidTarget[1] = cminy;\n    centroidTarget[2] = cminz;\n    centroidTarget[3] = cmaxx;\n    centroidTarget[4] = cmaxy;\n    centroidTarget[5] = cmaxz;\n  }\n} // A stand alone function for retrieving the centroid bounds.\n\n\nfunction getCentroidBounds(triangleBounds, offset, count, centroidTarget) {\n  let cminx = Infinity;\n  let cminy = Infinity;\n  let cminz = Infinity;\n  let cmaxx = -Infinity;\n  let cmaxy = -Infinity;\n  let cmaxz = -Infinity;\n\n  for (let i = offset * 6, end = (offset + count) * 6; i < end; i += 6) {\n    const cx = triangleBounds[i + 0];\n    if (cx < cminx) cminx = cx;\n    if (cx > cmaxx) cmaxx = cx;\n    const cy = triangleBounds[i + 2];\n    if (cy < cminy) cminy = cy;\n    if (cy > cmaxy) cmaxy = cy;\n    const cz = triangleBounds[i + 4];\n    if (cz < cminz) cminz = cz;\n    if (cz > cmaxz) cmaxz = cz;\n  }\n\n  centroidTarget[0] = cminx;\n  centroidTarget[1] = cminy;\n  centroidTarget[2] = cminz;\n  centroidTarget[3] = cmaxx;\n  centroidTarget[4] = cmaxy;\n  centroidTarget[5] = cmaxz;\n} // reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\n\n\nfunction partition(index, triangleBounds, offset, count, split) {\n  let left = offset;\n  let right = offset + count - 1;\n  const pos = split.pos;\n  const axisOffset = split.axis * 2; // hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\n  while (true) {\n    while (left <= right && triangleBounds[left * 6 + axisOffset] < pos) {\n      left++;\n    } // if a triangle center lies on the partition plane it is considered to be on the right side\n\n\n    while (left <= right && triangleBounds[right * 6 + axisOffset] >= pos) {\n      right--;\n    }\n\n    if (left < right) {\n      // we need to swap all of the information associated with the triangles at index\n      // left and right; that's the verts in the geometry index, the bounds,\n      // and perhaps the SAH planes\n      for (let i = 0; i < 3; i++) {\n        let t0 = index[left * 3 + i];\n        index[left * 3 + i] = index[right * 3 + i];\n        index[right * 3 + i] = t0;\n        let t1 = triangleBounds[left * 6 + i * 2 + 0];\n        triangleBounds[left * 6 + i * 2 + 0] = triangleBounds[right * 6 + i * 2 + 0];\n        triangleBounds[right * 6 + i * 2 + 0] = t1;\n        let t2 = triangleBounds[left * 6 + i * 2 + 1];\n        triangleBounds[left * 6 + i * 2 + 1] = triangleBounds[right * 6 + i * 2 + 1];\n        triangleBounds[right * 6 + i * 2 + 1] = t2;\n      }\n\n      left++;\n      right--;\n    } else {\n      return left;\n    }\n  }\n}\n\nconst BIN_COUNT = 32;\nconst sahBins = new Array(BIN_COUNT).fill().map(() => {\n  return {\n    count: 0,\n    bounds: new Float32Array(6),\n    rightCacheBounds: new Float32Array(6),\n    candidate: 0\n  };\n});\nconst leftBounds = new Float32Array(6);\n\nfunction getOptimalSplit(nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy) {\n  let axis = -1;\n  let pos = 0; // Center\n\n  if (strategy === CENTER) {\n    axis = getLongestEdgeIndex(centroidBoundingData);\n\n    if (axis !== -1) {\n      pos = (centroidBoundingData[axis] + centroidBoundingData[axis + 3]) / 2;\n    }\n  } else if (strategy === AVERAGE) {\n    axis = getLongestEdgeIndex(nodeBoundingData);\n\n    if (axis !== -1) {\n      pos = getAverage(triangleBounds, offset, count, axis);\n    }\n  } else if (strategy === SAH) {\n    const rootSurfaceArea = computeSurfaceArea(nodeBoundingData);\n    let bestCost = TRIANGLE_INTERSECT_COST * count; // iterate over all axes\n\n    const cStart = offset * 6;\n    const cEnd = (offset + count) * 6;\n\n    for (let a = 0; a < 3; a++) {\n      const axisLeft = centroidBoundingData[a];\n      const axisRight = centroidBoundingData[a + 3];\n      const axisLength = axisRight - axisLeft;\n      const binWidth = axisLength / BIN_COUNT; // reset the bins\n\n      for (let i = 0; i < BIN_COUNT; i++) {\n        const bin = sahBins[i];\n        bin.count = 0;\n        bin.candidate = axisLeft + binWidth + i * binWidth;\n        const bounds = bin.bounds;\n\n        for (let d = 0; d < 3; d++) {\n          bounds[d] = Infinity;\n          bounds[d + 3] = -Infinity;\n        }\n      } // iterate over all center positions\n\n\n      for (let c = cStart; c < cEnd; c += 6) {\n        const triCenter = triangleBounds[c + 2 * a];\n        const relativeCenter = triCenter - axisLeft; // in the partition function if the centroid lies on the split plane then it is\n        // considered to be on the right side of the split\n\n        let binIndex = ~~(relativeCenter / binWidth);\n        if (binIndex >= BIN_COUNT) binIndex = BIN_COUNT - 1;\n        const bin = sahBins[binIndex];\n        bin.count++;\n        const bounds = bin.bounds;\n\n        for (let d = 0; d < 3; d++) {\n          const tCenter = triangleBounds[c + 2 * d];\n          const tHalf = triangleBounds[c + 2 * d + 1];\n          const tMin = tCenter - tHalf;\n          const tMax = tCenter + tHalf;\n\n          if (tMin < bounds[d]) {\n            bounds[d] = tMin;\n          }\n\n          if (tMax > bounds[d + 3]) {\n            bounds[d + 3] = tMax;\n          }\n        }\n      } // cache the unioned bounds from right to left so we don't have to regenerate them each time\n\n\n      const lastBin = sahBins[BIN_COUNT - 1];\n      copyBounds(lastBin.bounds, lastBin.rightCacheBounds);\n\n      for (let i = BIN_COUNT - 2; i >= 0; i--) {\n        const bin = sahBins[i];\n        const nextBin = sahBins[i + 1];\n        unionBounds(bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds);\n      }\n\n      let leftCount = 0;\n\n      for (let i = 0; i < BIN_COUNT - 1; i++) {\n        const bin = sahBins[i];\n        const binCount = bin.count;\n        const bounds = bin.bounds;\n        const nextBin = sahBins[i + 1];\n        const rightBounds = nextBin.rightCacheBounds; // dont do anything with the bounds if the new bounds have no triangles\n\n        if (binCount !== 0) {\n          if (leftCount === 0) {\n            copyBounds(bounds, leftBounds);\n          } else {\n            unionBounds(bounds, leftBounds, leftBounds);\n          }\n        }\n\n        leftCount += binCount; // check the cost of this split\n\n        let leftProb = 0;\n        let rightProb = 0;\n\n        if (leftCount !== 0) {\n          leftProb = computeSurfaceArea(leftBounds) / rootSurfaceArea;\n        }\n\n        const rightCount = count - leftCount;\n\n        if (rightCount !== 0) {\n          rightProb = computeSurfaceArea(rightBounds) / rootSurfaceArea;\n        }\n\n        const cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (leftProb * leftCount + rightProb * rightCount);\n\n        if (cost < bestCost) {\n          axis = a;\n          bestCost = cost;\n          pos = bin.candidate;\n        }\n      }\n    }\n  }\n\n  return {\n    axis,\n    pos\n  };\n} // returns the average coordinate on the specified axis of the all the provided triangles\n\n\nfunction getAverage(triangleBounds, offset, count, axis) {\n  let avg = 0;\n\n  for (let i = offset, end = offset + count; i < end; i++) {\n    avg += triangleBounds[i * 6 + axis * 2];\n  }\n\n  return avg / count;\n} // precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\n\n\nfunction computeTriangleBounds(geo) {\n  const posAttr = geo.attributes.position;\n  const posArr = posAttr.array;\n  const index = geo.index.array;\n  const triCount = index.length / 3;\n  const triangleBounds = new Float32Array(triCount * 6); // support for an interleaved position buffer\n\n  const bufferOffset = posAttr.offset || 0;\n  let stride = 3;\n\n  if (posAttr.isInterleavedBufferAttribute) {\n    stride = posAttr.data.stride;\n  }\n\n  for (let tri = 0; tri < triCount; tri++) {\n    const tri3 = tri * 3;\n    const tri6 = tri * 6;\n    const ai = index[tri3 + 0] * stride + bufferOffset;\n    const bi = index[tri3 + 1] * stride + bufferOffset;\n    const ci = index[tri3 + 2] * stride + bufferOffset;\n\n    for (let el = 0; el < 3; el++) {\n      const a = posArr[ai + el];\n      const b = posArr[bi + el];\n      const c = posArr[ci + el];\n      let min = a;\n      if (b < min) min = b;\n      if (c < min) min = c;\n      let max = a;\n      if (b > max) max = b;\n      if (c > max) max = c; // Increase the bounds size by float32 epsilon to avoid precision errors when\n      // converting to 32 bit float. Scale the epsilon by the size of the numbers being\n      // worked with.\n\n      const halfExtents = (max - min) / 2;\n      const el2 = el * 2;\n      triangleBounds[tri6 + el2 + 0] = min + halfExtents;\n      triangleBounds[tri6 + el2 + 1] = halfExtents + (Math.abs(min) + halfExtents) * FLOAT32_EPSILON;\n    }\n  }\n\n  return triangleBounds;\n}\n\nexport function buildTree(geo, options) {\n  // either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n  // recording the offset and count of its triangles and writing them into the reordered geometry index.\n  function splitNode(node, offset, count, centroidBoundingData = null, depth = 0) {\n    if (!reachedMaxDepth && depth >= maxDepth) {\n      reachedMaxDepth = true;\n\n      if (verbose) {\n        console.warn(`MeshBVH: Max depth of ${maxDepth} reached when generating BVH. Consider increasing maxDepth.`);\n        console.warn(this, geo);\n      }\n    } // early out if we've met our capacity\n\n\n    if (count <= maxLeafTris || depth >= maxDepth) {\n      node.offset = offset;\n      node.count = count;\n      return node;\n    } // Find where to split the volume\n\n\n    const split = getOptimalSplit(node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy);\n\n    if (split.axis === -1) {\n      node.offset = offset;\n      node.count = count;\n      return node;\n    }\n\n    const splitOffset = partition(indexArray, triangleBounds, offset, count, split); // create the two new child nodes\n\n    if (splitOffset === offset || splitOffset === offset + count) {\n      node.offset = offset;\n      node.count = count;\n    } else {\n      node.splitAxis = split.axis; // create the left child and compute its bounding box\n\n      const left = new MeshBVHNode();\n      const lstart = offset;\n      const lcount = splitOffset - offset;\n      node.left = left;\n      left.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData);\n      splitNode(left, lstart, lcount, cacheCentroidBoundingData, depth + 1); // repeat for right\n\n      const right = new MeshBVHNode();\n      const rstart = splitOffset;\n      const rcount = count - lcount;\n      node.right = right;\n      right.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData);\n      splitNode(right, rstart, rcount, cacheCentroidBoundingData, depth + 1);\n    }\n\n    return node;\n  }\n\n  ensureIndex(geo);\n  const cacheCentroidBoundingData = new Float32Array(6);\n  const triangleBounds = computeTriangleBounds(geo);\n  const indexArray = geo.index.array;\n  const maxDepth = options.maxDepth;\n  const verbose = options.verbose;\n  const maxLeafTris = options.maxLeafTris;\n  const strategy = options.strategy;\n  let reachedMaxDepth = false;\n  const roots = [];\n  const ranges = getRootIndexRanges(geo);\n\n  if (ranges.length === 1) {\n    const root = new MeshBVHNode();\n    const range = ranges[0];\n\n    if (geo.boundingBox != null) {\n      root.boundingData = boxToArray(geo.boundingBox);\n      getCentroidBounds(triangleBounds, range.offset, range.count, cacheCentroidBoundingData);\n    } else {\n      root.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n    }\n\n    splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n    roots.push(root);\n  } else {\n    for (let range of ranges) {\n      const root = new MeshBVHNode();\n      root.boundingData = new Float32Array(6);\n      getBounds(triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData);\n      splitNode(root, range.offset, range.count, cacheCentroidBoundingData);\n      roots.push(root);\n    }\n  }\n\n  return roots;\n}\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\nexport function buildPackedTree(geo, options) {\n  // boundingData  \t\t\t\t: 6 float32\n  // right / offset \t\t\t\t: 1 uint32\n  // splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n  const roots = buildTree(geo, options);\n  let float32Array;\n  let uint32Array;\n  let uint16Array;\n  const packedRoots = [];\n\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i];\n    let nodeCount = countNodes(root);\n    const buffer = new ArrayBuffer(BYTES_PER_NODE * nodeCount);\n    float32Array = new Float32Array(buffer);\n    uint32Array = new Uint32Array(buffer);\n    uint16Array = new Uint16Array(buffer);\n    populateBuffer(0, root);\n    packedRoots.push(buffer);\n  }\n\n  return packedRoots;\n\n  function countNodes(node) {\n    if (node.count) {\n      return 1;\n    } else {\n      return 1 + countNodes(node.left) + countNodes(node.right);\n    }\n  }\n\n  function populateBuffer(byteOffset, node) {\n    const stride4Offset = byteOffset / 4;\n    const stride2Offset = byteOffset / 2;\n    const isLeaf = !!node.count;\n    const boundingData = node.boundingData;\n\n    for (let i = 0; i < 6; i++) {\n      float32Array[stride4Offset + i] = boundingData[i];\n    }\n\n    if (isLeaf) {\n      const offset = node.offset;\n      const count = node.count;\n      uint32Array[stride4Offset + 6] = offset;\n      uint16Array[stride2Offset + 14] = count;\n      uint16Array[stride2Offset + 15] = IS_LEAFNODE_FLAG;\n      return byteOffset + BYTES_PER_NODE;\n    } else {\n      const left = node.left;\n      const right = node.right;\n      const splitAxis = node.splitAxis;\n      let nextUnusedPointer;\n      nextUnusedPointer = populateBuffer(byteOffset + BYTES_PER_NODE, left);\n\n      if (nextUnusedPointer / 4 > Math.pow(2, 32)) {\n        throw new Error('MeshBVH: Cannot store child pointer greater than 32 bits.');\n      }\n\n      uint32Array[stride4Offset + 6] = nextUnusedPointer / 4;\n      nextUnusedPointer = populateBuffer(nextUnusedPointer, right);\n      uint32Array[stride4Offset + 7] = splitAxis;\n      return nextUnusedPointer;\n    }\n  }\n}","map":{"version":3,"sources":["/Users/alisablakeney/coding/websites/tina-demo/node_modules/three-mesh-bvh/src/buildFunctions.js"],"names":["BufferAttribute","MeshBVHNode","boxToArray","getLongestEdgeIndex","computeSurfaceArea","copyBounds","unionBounds","CENTER","AVERAGE","SAH","TRIANGLE_INTERSECT_COST","TRAVERSAL_COST","FLOAT32_EPSILON","Math","pow","ensureIndex","geo","index","vertexCount","attributes","position","count","Uint32Array","Uint16Array","setIndex","i","getRootIndexRanges","groups","length","offset","ranges","rangeBoundaries","Set","group","add","start","sortedBoundaries","Array","from","values","sort","a","b","end","push","getBounds","triangleBounds","target","centroidTarget","minx","Infinity","miny","minz","maxx","maxy","maxz","cminx","cminy","cminz","cmaxx","cmaxy","cmaxz","includeCentroid","cx","hx","lx","rx","cy","hy","ly","ry","cz","hz","lz","rz","getCentroidBounds","partition","split","left","right","pos","axisOffset","axis","t0","t1","t2","BIN_COUNT","sahBins","fill","map","bounds","Float32Array","rightCacheBounds","candidate","leftBounds","getOptimalSplit","nodeBoundingData","centroidBoundingData","strategy","getAverage","rootSurfaceArea","bestCost","cStart","cEnd","axisLeft","axisRight","axisLength","binWidth","bin","d","c","triCenter","relativeCenter","binIndex","tCenter","tHalf","tMin","tMax","lastBin","nextBin","leftCount","binCount","rightBounds","leftProb","rightProb","rightCount","cost","avg","computeTriangleBounds","posAttr","posArr","array","triCount","bufferOffset","stride","isInterleavedBufferAttribute","data","tri","tri3","tri6","ai","bi","ci","el","min","max","halfExtents","el2","abs","buildTree","options","splitNode","node","depth","reachedMaxDepth","maxDepth","verbose","console","warn","maxLeafTris","boundingData","splitOffset","indexArray","splitAxis","lstart","lcount","cacheCentroidBoundingData","rstart","rcount","roots","root","range","boundingBox","BYTES_PER_NODE","IS_LEAFNODE_FLAG","buildPackedTree","float32Array","uint32Array","uint16Array","packedRoots","nodeCount","countNodes","buffer","ArrayBuffer","populateBuffer","byteOffset","stride4Offset","stride2Offset","isLeaf","nextUnusedPointer","Error"],"mappings":"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","sourcesContent":["import { BufferAttribute } from 'three';\nimport MeshBVHNode from './MeshBVHNode.js';\nimport { boxToArray, getLongestEdgeIndex, computeSurfaceArea, copyBounds, unionBounds } from './Utils/ArrayBoxUtilities.js';\nimport { CENTER, AVERAGE, SAH, TRIANGLE_INTERSECT_COST, TRAVERSAL_COST } from './Constants.js';\n\n// https://en.wikipedia.org/wiki/Machine_epsilon#Values_for_standard_hardware_floating_point_arithmetics\nconst FLOAT32_EPSILON = Math.pow( 2, - 24 );\n\nfunction ensureIndex( geo ) {\n\n\tif ( ! geo.index ) {\n\n\t\tconst vertexCount = geo.attributes.position.count;\n\t\tconst index = new ( vertexCount > 65535 ? Uint32Array : Uint16Array )( vertexCount );\n\t\tgeo.setIndex( new BufferAttribute( index, 1 ) );\n\n\t\tfor ( let i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tindex[ i ] = i;\n\n\t\t}\n\n\t}\n\n}\n\n// Computes the set of { offset, count } ranges which need independent BVH roots. Each\n// region in the geometry index that belongs to a different set of material groups requires\n// a separate BVH root, so that triangles indices belonging to one group never get swapped\n// with triangle indices belongs to another group. For example, if the groups were like this:\n//\n// [-------------------------------------------------------------]\n// |__________________|\n//   g0 = [0, 20]  |______________________||_____________________|\n//                      g1 = [16, 40]           g2 = [41, 60]\n//\n// we would need four BVH roots: [0, 15], [16, 20], [21, 40], [41, 60].\nfunction getRootIndexRanges( geo ) {\n\n\tif ( ! geo.groups || ! geo.groups.length ) {\n\n\t\treturn [ { offset: 0, count: geo.index.count / 3 } ];\n\n\t}\n\n\tconst ranges = [];\n\tconst rangeBoundaries = new Set();\n\tfor ( const group of geo.groups ) {\n\n\t\trangeBoundaries.add( group.start );\n\t\trangeBoundaries.add( group.start + group.count );\n\n\t}\n\n\t// note that if you don't pass in a comparator, it sorts them lexicographically as strings :-(\n\tconst sortedBoundaries = Array.from( rangeBoundaries.values() ).sort( ( a, b ) => a - b );\n\tfor ( let i = 0; i < sortedBoundaries.length - 1; i ++ ) {\n\n\t\tconst start = sortedBoundaries[ i ], end = sortedBoundaries[ i + 1 ];\n\t\tranges.push( { offset: ( start / 3 ), count: ( end - start ) / 3 } );\n\n\t}\n\n\treturn ranges;\n\n}\n\n// computes the union of the bounds of all of the given triangles and puts the resulting box in target. If\n// centroidTarget is provided then a bounding box is computed for the centroids of the triangles, as well.\n// These are computed together to avoid redundant accesses to bounds array.\nfunction getBounds( triangleBounds, offset, count, target, centroidTarget = null ) {\n\n\tlet minx = Infinity;\n\tlet miny = Infinity;\n\tlet minz = Infinity;\n\tlet maxx = - Infinity;\n\tlet maxy = - Infinity;\n\tlet maxz = - Infinity;\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tconst includeCentroid = centroidTarget !== null;\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tconst hx = triangleBounds[ i + 1 ];\n\t\tconst lx = cx - hx;\n\t\tconst rx = cx + hx;\n\t\tif ( lx < minx ) minx = lx;\n\t\tif ( rx > maxx ) maxx = rx;\n\t\tif ( includeCentroid && cx < cminx ) cminx = cx;\n\t\tif ( includeCentroid && cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tconst hy = triangleBounds[ i + 3 ];\n\t\tconst ly = cy - hy;\n\t\tconst ry = cy + hy;\n\t\tif ( ly < miny ) miny = ly;\n\t\tif ( ry > maxy ) maxy = ry;\n\t\tif ( includeCentroid && cy < cminy ) cminy = cy;\n\t\tif ( includeCentroid && cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tconst hz = triangleBounds[ i + 5 ];\n\t\tconst lz = cz - hz;\n\t\tconst rz = cz + hz;\n\t\tif ( lz < minz ) minz = lz;\n\t\tif ( rz > maxz ) maxz = rz;\n\t\tif ( includeCentroid && cz < cminz ) cminz = cz;\n\t\tif ( includeCentroid && cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\ttarget[ 0 ] = minx;\n\ttarget[ 1 ] = miny;\n\ttarget[ 2 ] = minz;\n\n\ttarget[ 3 ] = maxx;\n\ttarget[ 4 ] = maxy;\n\ttarget[ 5 ] = maxz;\n\n\tif ( includeCentroid ) {\n\n\t\tcentroidTarget[ 0 ] = cminx;\n\t\tcentroidTarget[ 1 ] = cminy;\n\t\tcentroidTarget[ 2 ] = cminz;\n\n\t\tcentroidTarget[ 3 ] = cmaxx;\n\t\tcentroidTarget[ 4 ] = cmaxy;\n\t\tcentroidTarget[ 5 ] = cmaxz;\n\n\t}\n\n}\n\n// A stand alone function for retrieving the centroid bounds.\nfunction getCentroidBounds( triangleBounds, offset, count, centroidTarget ) {\n\n\tlet cminx = Infinity;\n\tlet cminy = Infinity;\n\tlet cminz = Infinity;\n\tlet cmaxx = - Infinity;\n\tlet cmaxy = - Infinity;\n\tlet cmaxz = - Infinity;\n\n\tfor ( let i = offset * 6, end = ( offset + count ) * 6; i < end; i += 6 ) {\n\n\t\tconst cx = triangleBounds[ i + 0 ];\n\t\tif ( cx < cminx ) cminx = cx;\n\t\tif ( cx > cmaxx ) cmaxx = cx;\n\n\t\tconst cy = triangleBounds[ i + 2 ];\n\t\tif ( cy < cminy ) cminy = cy;\n\t\tif ( cy > cmaxy ) cmaxy = cy;\n\n\t\tconst cz = triangleBounds[ i + 4 ];\n\t\tif ( cz < cminz ) cminz = cz;\n\t\tif ( cz > cmaxz ) cmaxz = cz;\n\n\t}\n\n\tcentroidTarget[ 0 ] = cminx;\n\tcentroidTarget[ 1 ] = cminy;\n\tcentroidTarget[ 2 ] = cminz;\n\n\tcentroidTarget[ 3 ] = cmaxx;\n\tcentroidTarget[ 4 ] = cmaxy;\n\tcentroidTarget[ 5 ] = cmaxz;\n\n}\n\n\n// reorders `tris` such that for `count` elements after `offset`, elements on the left side of the split\n// will be on the left and elements on the right side of the split will be on the right. returns the index\n// of the first element on the right side, or offset + count if there are no elements on the right side.\nfunction partition( index, triangleBounds, offset, count, split ) {\n\n\tlet left = offset;\n\tlet right = offset + count - 1;\n\tconst pos = split.pos;\n\tconst axisOffset = split.axis * 2;\n\n\t// hoare partitioning, see e.g. https://en.wikipedia.org/wiki/Quicksort#Hoare_partition_scheme\n\twhile ( true ) {\n\n\t\twhile ( left <= right && triangleBounds[ left * 6 + axisOffset ] < pos ) {\n\n\t\t\tleft ++;\n\n\t\t}\n\n\n\t\t// if a triangle center lies on the partition plane it is considered to be on the right side\n\t\twhile ( left <= right && triangleBounds[ right * 6 + axisOffset ] >= pos ) {\n\n\t\t\tright --;\n\n\t\t}\n\n\t\tif ( left < right ) {\n\n\t\t\t// we need to swap all of the information associated with the triangles at index\n\t\t\t// left and right; that's the verts in the geometry index, the bounds,\n\t\t\t// and perhaps the SAH planes\n\n\t\t\tfor ( let i = 0; i < 3; i ++ ) {\n\n\t\t\t\tlet t0 = index[ left * 3 + i ];\n\t\t\t\tindex[ left * 3 + i ] = index[ right * 3 + i ];\n\t\t\t\tindex[ right * 3 + i ] = t0;\n\n\t\t\t\tlet t1 = triangleBounds[ left * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 0 ] = triangleBounds[ right * 6 + i * 2 + 0 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 0 ] = t1;\n\n\t\t\t\tlet t2 = triangleBounds[ left * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ left * 6 + i * 2 + 1 ] = triangleBounds[ right * 6 + i * 2 + 1 ];\n\t\t\t\ttriangleBounds[ right * 6 + i * 2 + 1 ] = t2;\n\n\t\t\t}\n\n\t\t\tleft ++;\n\t\t\tright --;\n\n\t\t} else {\n\n\t\t\treturn left;\n\n\t\t}\n\n\t}\n\n}\n\nconst BIN_COUNT = 32;\nconst sahBins = new Array( BIN_COUNT ).fill().map( () => {\n\n\treturn {\n\n\t\tcount: 0,\n\t\tbounds: new Float32Array( 6 ),\n\t\trightCacheBounds: new Float32Array( 6 ),\n\t\tcandidate: 0,\n\n\t};\n\n} );\nconst leftBounds = new Float32Array( 6 );\n\nfunction getOptimalSplit( nodeBoundingData, centroidBoundingData, triangleBounds, offset, count, strategy ) {\n\n\tlet axis = - 1;\n\tlet pos = 0;\n\n\t// Center\n\tif ( strategy === CENTER ) {\n\n\t\taxis = getLongestEdgeIndex( centroidBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = ( centroidBoundingData[ axis ] + centroidBoundingData[ axis + 3 ] ) / 2;\n\n\t\t}\n\n\t} else if ( strategy === AVERAGE ) {\n\n\t\taxis = getLongestEdgeIndex( nodeBoundingData );\n\t\tif ( axis !== - 1 ) {\n\n\t\t\tpos = getAverage( triangleBounds, offset, count, axis );\n\n\t\t}\n\n\t} else if ( strategy === SAH ) {\n\n\t\tconst rootSurfaceArea = computeSurfaceArea( nodeBoundingData );\n\t\tlet bestCost = TRIANGLE_INTERSECT_COST * count;\n\n\t\t// iterate over all axes\n\t\tconst cStart = offset * 6;\n\t\tconst cEnd = ( offset + count ) * 6;\n\t\tfor ( let a = 0; a < 3; a ++ ) {\n\n\t\t\tconst axisLeft = centroidBoundingData[ a ];\n\t\t\tconst axisRight = centroidBoundingData[ a + 3 ];\n\t\t\tconst axisLength = axisRight - axisLeft;\n\t\t\tconst binWidth = axisLength / BIN_COUNT;\n\n\t\t\t// reset the bins\n\t\t\tfor ( let i = 0; i < BIN_COUNT; i ++ ) {\n\n\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\tbin.count = 0;\n\t\t\t\tbin.candidate = axisLeft + binWidth + i * binWidth;\n\n\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\tbounds[ d ] = Infinity;\n\t\t\t\t\tbounds[ d + 3 ] = - Infinity;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// iterate over all center positions\n\t\t\tfor ( let c = cStart; c < cEnd; c += 6 ) {\n\n\t\t\t\tconst triCenter = triangleBounds[ c + 2 * a ];\n\t\t\t\tconst relativeCenter = triCenter - axisLeft;\n\n\t\t\t\t// in the partition function if the centroid lies on the split plane then it is\n\t\t\t\t// considered to be on the right side of the split\n\t\t\t\tlet binIndex = ~ ~ ( relativeCenter / binWidth );\n\t\t\t\tif ( binIndex >= BIN_COUNT ) binIndex = BIN_COUNT - 1;\n\n\t\t\t\tconst bin = sahBins[ binIndex ];\n\t\t\t\tbin.count ++;\n\n\t\t\t\tconst bounds = bin.bounds;\n\t\t\t\tfor ( let d = 0; d < 3; d ++ ) {\n\n\t\t\t\t\tconst tCenter = triangleBounds[ c + 2 * d ];\n\t\t\t\t\tconst tHalf = triangleBounds[ c + 2 * d + 1 ];\n\n\t\t\t\t\tconst tMin = tCenter - tHalf;\n\t\t\t\t\tconst tMax = tCenter + tHalf;\n\n\t\t\t\t\tif ( tMin < bounds[ d ] ) {\n\n\t\t\t\t\t\tbounds[ d ] = tMin;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( tMax > bounds[ d + 3 ] ) {\n\n\t\t\t\t\t\tbounds[ d + 3 ] = tMax;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// cache the unioned bounds from right to left so we don't have to regenerate them each time\n\t\t\tconst lastBin = sahBins[ BIN_COUNT - 1 ];\n\t\t\tcopyBounds( lastBin.bounds, lastBin.rightCacheBounds );\n\t\t\tfor ( let i = BIN_COUNT - 2; i >= 0; i -- ) {\n\n\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\tunionBounds( bin.bounds, nextBin.rightCacheBounds, bin.rightCacheBounds );\n\n\t\t\t}\n\n\t\t\tlet leftCount = 0;\n\t\t\tfor ( let i = 0; i < BIN_COUNT - 1; i ++ ) {\n\n\t\t\t\tconst bin = sahBins[ i ];\n\t\t\t\tconst binCount = bin.count;\n\t\t\t\tconst bounds = bin.bounds;\n\n\t\t\t\tconst nextBin = sahBins[ i + 1 ];\n\t\t\t\tconst rightBounds = nextBin.rightCacheBounds;\n\n\t\t\t\t// dont do anything with the bounds if the new bounds have no triangles\n\t\t\t\tif ( binCount !== 0 ) {\n\n\t\t\t\t\tif ( leftCount === 0 ) {\n\n\t\t\t\t\t\tcopyBounds( bounds, leftBounds );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tunionBounds( bounds, leftBounds, leftBounds );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tleftCount += binCount;\n\n\t\t\t\t// check the cost of this split\n\t\t\t\tlet leftProb = 0;\n\t\t\t\tlet rightProb = 0;\n\n\t\t\t\tif ( leftCount !== 0 ) {\n\n\t\t\t\t\tleftProb = computeSurfaceArea( leftBounds ) / rootSurfaceArea;\n\n\t\t\t\t}\n\n\t\t\t\tconst rightCount = count - leftCount;\n\t\t\t\tif ( rightCount !== 0 ) {\n\n\t\t\t\t\trightProb = computeSurfaceArea( rightBounds ) / rootSurfaceArea;\n\n\t\t\t\t}\n\n\t\t\t\tconst cost = TRAVERSAL_COST + TRIANGLE_INTERSECT_COST * (\n\t\t\t\t\tleftProb * leftCount + rightProb * rightCount\n\t\t\t\t);\n\n\t\t\t\tif ( cost < bestCost ) {\n\n\t\t\t\t\taxis = a;\n\t\t\t\t\tbestCost = cost;\n\t\t\t\t\tpos = bin.candidate;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\treturn { axis, pos };\n\n}\n\n// returns the average coordinate on the specified axis of the all the provided triangles\nfunction getAverage( triangleBounds, offset, count, axis ) {\n\n\tlet avg = 0;\n\tfor ( let i = offset, end = offset + count; i < end; i ++ ) {\n\n\t\tavg += triangleBounds[ i * 6 + axis * 2 ];\n\n\t}\n\n\treturn avg / count;\n\n}\n\n// precomputes the bounding box for each triangle; required for quickly calculating tree splits.\n// result is an array of size tris.length * 6 where triangle i maps to a\n// [x_center, x_delta, y_center, y_delta, z_center, z_delta] tuple starting at index i * 6,\n// representing the center and half-extent in each dimension of triangle i\nfunction computeTriangleBounds( geo ) {\n\n\tconst posAttr = geo.attributes.position;\n\tconst posArr = posAttr.array;\n\tconst index = geo.index.array;\n\tconst triCount = index.length / 3;\n\tconst triangleBounds = new Float32Array( triCount * 6 );\n\n\t// support for an interleaved position buffer\n\tconst bufferOffset = posAttr.offset || 0;\n\tlet stride = 3;\n\tif ( posAttr.isInterleavedBufferAttribute ) {\n\n\t\tstride = posAttr.data.stride;\n\n\t}\n\n\tfor ( let tri = 0; tri < triCount; tri ++ ) {\n\n\t\tconst tri3 = tri * 3;\n\t\tconst tri6 = tri * 6;\n\t\tconst ai = index[ tri3 + 0 ] * stride + bufferOffset;\n\t\tconst bi = index[ tri3 + 1 ] * stride + bufferOffset;\n\t\tconst ci = index[ tri3 + 2 ] * stride + bufferOffset;\n\n\t\tfor ( let el = 0; el < 3; el ++ ) {\n\n\t\t\tconst a = posArr[ ai + el ];\n\t\t\tconst b = posArr[ bi + el ];\n\t\t\tconst c = posArr[ ci + el ];\n\n\t\t\tlet min = a;\n\t\t\tif ( b < min ) min = b;\n\t\t\tif ( c < min ) min = c;\n\n\t\t\tlet max = a;\n\t\t\tif ( b > max ) max = b;\n\t\t\tif ( c > max ) max = c;\n\n\t\t\t// Increase the bounds size by float32 epsilon to avoid precision errors when\n\t\t\t// converting to 32 bit float. Scale the epsilon by the size of the numbers being\n\t\t\t// worked with.\n\t\t\tconst halfExtents = ( max - min ) / 2;\n\t\t\tconst el2 = el * 2;\n\t\t\ttriangleBounds[ tri6 + el2 + 0 ] = min + halfExtents;\n\t\t\ttriangleBounds[ tri6 + el2 + 1 ] = halfExtents + ( Math.abs( min ) + halfExtents ) * FLOAT32_EPSILON;\n\n\t\t}\n\n\t}\n\n\treturn triangleBounds;\n\n}\n\nexport function buildTree( geo, options ) {\n\n\t// either recursively splits the given node, creating left and right subtrees for it, or makes it a leaf node,\n\t// recording the offset and count of its triangles and writing them into the reordered geometry index.\n\tfunction splitNode( node, offset, count, centroidBoundingData = null, depth = 0 ) {\n\n\t\tif ( ! reachedMaxDepth && depth >= maxDepth ) {\n\n\t\t\treachedMaxDepth = true;\n\t\t\tif ( verbose ) {\n\n\t\t\t\tconsole.warn( `MeshBVH: Max depth of ${ maxDepth } reached when generating BVH. Consider increasing maxDepth.` );\n\t\t\t\tconsole.warn( this, geo );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// early out if we've met our capacity\n\t\tif ( count <= maxLeafTris || depth >= maxDepth ) {\n\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\t// Find where to split the volume\n\t\tconst split = getOptimalSplit( node.boundingData, centroidBoundingData, triangleBounds, offset, count, strategy );\n\t\tif ( split.axis === - 1 ) {\n\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\t\t\treturn node;\n\n\t\t}\n\n\t\tconst splitOffset = partition( indexArray, triangleBounds, offset, count, split );\n\n\t\t// create the two new child nodes\n\t\tif ( splitOffset === offset || splitOffset === offset + count ) {\n\n\t\t\tnode.offset = offset;\n\t\t\tnode.count = count;\n\n\t\t} else {\n\n\t\t\tnode.splitAxis = split.axis;\n\n\t\t\t// create the left child and compute its bounding box\n\t\t\tconst left = new MeshBVHNode();\n\t\t\tconst lstart = offset;\n\t\t\tconst lcount = splitOffset - offset;\n\t\t\tnode.left = left;\n\t\t\tleft.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, lstart, lcount, left.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( left, lstart, lcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t\t// repeat for right\n\t\t\tconst right = new MeshBVHNode();\n\t\t\tconst rstart = splitOffset;\n\t\t\tconst rcount = count - lcount;\n\t\t\tnode.right = right;\n\t\t\tright.boundingData = new Float32Array( 6 );\n\n\t\t\tgetBounds( triangleBounds, rstart, rcount, right.boundingData, cacheCentroidBoundingData );\n\t\t\tsplitNode( right, rstart, rcount, cacheCentroidBoundingData, depth + 1 );\n\n\t\t}\n\n\t\treturn node;\n\n\t}\n\n\tensureIndex( geo );\n\n\tconst cacheCentroidBoundingData = new Float32Array( 6 );\n\tconst triangleBounds = computeTriangleBounds( geo );\n\tconst indexArray = geo.index.array;\n\tconst maxDepth = options.maxDepth;\n\tconst verbose = options.verbose;\n\tconst maxLeafTris = options.maxLeafTris;\n\tconst strategy = options.strategy;\n\tlet reachedMaxDepth = false;\n\n\tconst roots = [];\n\tconst ranges = getRootIndexRanges( geo );\n\n\tif ( ranges.length === 1 ) {\n\n\t\tconst root = new MeshBVHNode();\n\t\tconst range = ranges[ 0 ];\n\n\t\tif ( geo.boundingBox != null ) {\n\n\t\t\troot.boundingData = boxToArray( geo.boundingBox );\n\t\t\tgetCentroidBounds( triangleBounds, range.offset, range.count, cacheCentroidBoundingData );\n\n\t\t} else {\n\n\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t}\n\n\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\troots.push( root );\n\n\t} else {\n\n\t\tfor ( let range of ranges ) {\n\n\t\t\tconst root = new MeshBVHNode();\n\t\t\troot.boundingData = new Float32Array( 6 );\n\t\t\tgetBounds( triangleBounds, range.offset, range.count, root.boundingData, cacheCentroidBoundingData );\n\n\t\t\tsplitNode( root, range.offset, range.count, cacheCentroidBoundingData );\n\t\t\troots.push( root );\n\n\t\t}\n\n\t}\n\n\treturn roots;\n\n}\n\nexport const BYTES_PER_NODE = 6 * 4 + 4 + 4;\n\nexport const IS_LEAFNODE_FLAG = 0xFFFF;\n\nexport function buildPackedTree( geo, options ) {\n\n\t// boundingData  \t\t\t\t: 6 float32\n\t// right / offset \t\t\t\t: 1 uint32\n\t// splitAxis / isLeaf + count \t: 1 uint32 / 2 uint16\n\tconst roots = buildTree( geo, options );\n\n\tlet float32Array;\n\tlet uint32Array;\n\tlet uint16Array;\n\tconst packedRoots = [];\n\tfor ( let i = 0; i < roots.length; i ++ ) {\n\n\t\tconst root = roots[ i ];\n\t\tlet nodeCount = countNodes( root );\n\n\t\tconst buffer = new ArrayBuffer( BYTES_PER_NODE * nodeCount );\n\t\tfloat32Array = new Float32Array( buffer );\n\t\tuint32Array = new Uint32Array( buffer );\n\t\tuint16Array = new Uint16Array( buffer );\n\t\tpopulateBuffer( 0, root );\n\t\tpackedRoots.push( buffer );\n\n\t}\n\n\treturn packedRoots;\n\n\tfunction countNodes( node ) {\n\n\t\tif ( node.count ) {\n\n\t\t\treturn 1;\n\n\t\t} else {\n\n\t\t\treturn 1 + countNodes( node.left ) + countNodes( node.right );\n\n\t\t}\n\n\t}\n\n\tfunction populateBuffer( byteOffset, node ) {\n\n\t\tconst stride4Offset = byteOffset / 4;\n\t\tconst stride2Offset = byteOffset / 2;\n\t\tconst isLeaf = ! ! node.count;\n\t\tconst boundingData = node.boundingData;\n\t\tfor ( let i = 0; i < 6; i ++ ) {\n\n\t\t\tfloat32Array[ stride4Offset + i ] = boundingData[ i ];\n\n\t\t}\n\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = node.offset;\n\t\t\tconst count = node.count;\n\t\t\tuint32Array[ stride4Offset + 6 ] = offset;\n\t\t\tuint16Array[ stride2Offset + 14 ] = count;\n\t\t\tuint16Array[ stride2Offset + 15 ] = IS_LEAFNODE_FLAG;\n\t\t\treturn byteOffset + BYTES_PER_NODE;\n\n\t\t} else {\n\n\t\t\tconst left = node.left;\n\t\t\tconst right = node.right;\n\t\t\tconst splitAxis = node.splitAxis;\n\n\t\t\tlet nextUnusedPointer;\n\t\t\tnextUnusedPointer = populateBuffer( byteOffset + BYTES_PER_NODE, left );\n\n\t\t\tif ( ( nextUnusedPointer / 4 ) > Math.pow( 2, 32 ) ) {\n\n\t\t\t\tthrow new Error( 'MeshBVH: Cannot store child pointer greater than 32 bits.' );\n\n\t\t\t}\n\n\t\t\tuint32Array[ stride4Offset + 6 ] = nextUnusedPointer / 4;\n\t\t\tnextUnusedPointer = populateBuffer( nextUnusedPointer, right );\n\n\t\t\tuint32Array[ stride4Offset + 7 ] = splitAxis;\n\t\t\treturn nextUnusedPointer;\n\n\t\t}\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}