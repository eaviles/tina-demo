{"ast":null,"code":"// For speed and readability this script is processed to replace the macro-like calls\n// with inline buffer reads. See generate-cast-functions.js.\nimport { Box3, Vector3, Mesh, Matrix4 } from 'three';\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtilities.js';\nimport { arrayToBox } from './Utils/BufferNodeUtils.js';\nimport { OrientedBox } from './Utils/OrientedBox.js';\nimport { setTriangle } from './Utils/TriangleUtils.js';\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\nimport { CONTAINED } from './Constants.js';\nconst boundingBox = new Box3();\nconst boxIntersection = new Vector3();\nconst xyzFields = ['x', 'y', 'z'];\n\nfunction IS_LEAF(n16, uint16Array) {\n  return uint16Array[n16 + 15] === 0xFFFF;\n}\n\nfunction OFFSET(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\n\nfunction COUNT(n32, uint16Array) {\n  return uint16Array[n32 + 14];\n}\n\nfunction LEFT_NODE(n32) {\n  return n32 + 8;\n}\n\nfunction RIGHT_NODE(n32, uint32Array) {\n  return uint32Array[n32 + 6];\n}\n\nfunction SPLIT_AXIS(n32, uint32Array) {\n  return uint32Array[n32 + 7];\n}\n\nfunction BOUNDING_DATA_INDEX(n32) {\n  return n32;\n}\n\nexport function raycast(nodeIndex32, mesh, geometry, raycaster, ray, intersects) {\n  let nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    intersectTris(mesh, geometry, raycaster, ray, offset, count, intersects);\n  } else {\n    const leftIndex = LEFT_NODE(nodeIndex32);\n\n    if (intersectRay(leftIndex, float32Array, ray, boxIntersection)) {\n      raycast(leftIndex, mesh, geometry, raycaster, ray, intersects);\n    }\n\n    const rightIndex = RIGHT_NODE(nodeIndex32, uint32Array);\n\n    if (intersectRay(rightIndex, float32Array, ray, boxIntersection)) {\n      raycast(rightIndex, mesh, geometry, raycaster, ray, intersects);\n    }\n  }\n}\nexport function raycastFirst(nodeIndex32, mesh, geometry, raycaster, ray) {\n  let nodeIndex16 = nodeIndex32 * 2,\n      float32Array = _float32Array,\n      uint16Array = _uint16Array,\n      uint32Array = _uint32Array;\n  const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n  if (isLeaf) {\n    const offset = OFFSET(nodeIndex32, uint32Array);\n    const count = COUNT(nodeIndex16, uint16Array);\n    return intersectClosestTri(mesh, geometry, raycaster, ray, offset, count);\n  } else {\n    // consider the position of the split plane with respect to the oncoming ray; whichever direction\n    // the ray is coming from, look for an intersection among that side of the tree first\n    const splitAxis = SPLIT_AXIS(nodeIndex32, uint32Array);\n    const xyzAxis = xyzFields[splitAxis];\n    const rayDir = ray.direction[xyzAxis];\n    const leftToRight = rayDir >= 0; // c1 is the child to check first\n\n    let c1, c2;\n\n    if (leftToRight) {\n      c1 = LEFT_NODE(nodeIndex32);\n      c2 = RIGHT_NODE(nodeIndex32, uint32Array);\n    } else {\n      c1 = RIGHT_NODE(nodeIndex32, uint32Array);\n      c2 = LEFT_NODE(nodeIndex32);\n    }\n\n    const c1Intersection = intersectRay(c1, float32Array, ray, boxIntersection);\n    const c1Result = c1Intersection ? raycastFirst(c1, mesh, geometry, raycaster, ray) : null; // if we got an intersection in the first node and it's closer than the second node's bounding\n    // box, we don't need to consider the second node because it couldn't possibly be a better result\n\n    if (c1Result) {\n      // check if the point is within the second bounds\n      const point = c1Result.localPoint[xyzAxis];\n      const isOutside = leftToRight ? point <= float32Array[c2 + splitAxis] : // min bounding data\n      point >= float32Array[c2 + splitAxis + 3]; // max bounding data\n\n      if (isOutside) {\n        return c1Result;\n      }\n    } // either there was no intersection in the first node, or there could still be a closer\n    // intersection in the second, so check the second node and then take the better of the two\n\n\n    const c2Intersection = intersectRay(c2, float32Array, ray, boxIntersection);\n    const c2Result = c2Intersection ? raycastFirst(c2, mesh, geometry, raycaster, ray) : null;\n\n    if (c1Result && c2Result) {\n      return c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n    } else {\n      return c1Result || c2Result || null;\n    }\n  }\n}\nexport const shapecast = function () {\n  const _box1 = new Box3();\n\n  const _box2 = new Box3();\n\n  return function shapecast(nodeIndex32, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc = null, nodeIndexByteOffset = 0, // offset for unique node identifier\n  depth = 0) {\n    // Define these inside the function so it has access to the local variables needed\n    // when converting to the buffer equivalents\n    function getLeftOffset(nodeIndex32) {\n      let nodeIndex16 = nodeIndex32 * 2,\n          uint16Array = _uint16Array,\n          uint32Array = _uint32Array; // traverse until we find a leaf\n\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        nodeIndex32 = LEFT_NODE(nodeIndex32);\n        nodeIndex16 = nodeIndex32 * 2;\n      }\n\n      return OFFSET(nodeIndex32, uint32Array);\n    }\n\n    function getRightEndOffset(nodeIndex32) {\n      let nodeIndex16 = nodeIndex32 * 2,\n          uint16Array = _uint16Array,\n          uint32Array = _uint32Array; // traverse until we find a leaf\n\n      while (!IS_LEAF(nodeIndex16, uint16Array)) {\n        // adjust offset to point to the right node\n        nodeIndex32 = RIGHT_NODE(nodeIndex32, uint32Array);\n        nodeIndex16 = nodeIndex32 * 2;\n      } // return the end offset of the triangle range\n\n\n      return OFFSET(nodeIndex32, uint32Array) + COUNT(nodeIndex16, uint16Array);\n    }\n\n    let nodeIndex16 = nodeIndex32 * 2,\n        float32Array = _float32Array,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n    if (isLeaf) {\n      const offset = OFFSET(nodeIndex32, uint32Array);\n      const count = COUNT(nodeIndex16, uint16Array);\n      return intersectsRangeFunc(offset, count, false, depth, nodeIndexByteOffset + nodeIndex32);\n    } else {\n      const left = LEFT_NODE(nodeIndex32);\n      const right = RIGHT_NODE(nodeIndex32, uint32Array);\n      let c1 = left;\n      let c2 = right;\n      let score1, score2;\n      let box1, box2;\n\n      if (nodeScoreFunc) {\n        box1 = _box1;\n        box2 = _box2; // bounding data is not offset\n\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n        arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n        score1 = nodeScoreFunc(box1);\n        score2 = nodeScoreFunc(box2);\n\n        if (score2 < score1) {\n          c1 = right;\n          c2 = left;\n          const temp = score1;\n          score1 = score2;\n          score2 = temp;\n          box1 = box2; // box2 is always set before use below\n        }\n      } // Check box 1 intersection\n\n\n      if (!box1) {\n        box1 = _box1;\n        arrayToBox(BOUNDING_DATA_INDEX(c1), float32Array, box1);\n      }\n\n      const isC1Leaf = IS_LEAF(c1 * 2, uint16Array);\n      const c1Intersection = intersectsBoundsFunc(box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1);\n      let c1StopTraversal;\n\n      if (c1Intersection === CONTAINED) {\n        const offset = getLeftOffset(c1);\n        const end = getRightEndOffset(c1);\n        const count = end - offset;\n        c1StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c1);\n      } else {\n        c1StopTraversal = c1Intersection && shapecast(c1, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n\n      if (c1StopTraversal) return true; // Check box 2 intersection\n      // cached box2 will have been overwritten by previous traversal\n\n      box2 = _box2;\n      arrayToBox(BOUNDING_DATA_INDEX(c2), float32Array, box2);\n      const isC2Leaf = IS_LEAF(c2 * 2, uint16Array);\n      const c2Intersection = intersectsBoundsFunc(box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2);\n      let c2StopTraversal;\n\n      if (c2Intersection === CONTAINED) {\n        const offset = getLeftOffset(c2);\n        const end = getRightEndOffset(c2);\n        const count = end - offset;\n        c2StopTraversal = intersectsRangeFunc(offset, count, true, depth + 1, nodeIndexByteOffset + c2);\n      } else {\n        c2StopTraversal = c2Intersection && shapecast(c2, geometry, intersectsBoundsFunc, intersectsRangeFunc, nodeScoreFunc, nodeIndexByteOffset, depth + 1);\n      }\n\n      if (c2StopTraversal) return true;\n      return false;\n    }\n  };\n}();\nexport const intersectsGeometry = function () {\n  const triangle = new SeparatingAxisTriangle();\n  const triangle2 = new SeparatingAxisTriangle();\n  const cachedMesh = new Mesh();\n  const invertedMat = new Matrix4();\n  const obb = new OrientedBox();\n  const obb2 = new OrientedBox();\n  return function intersectsGeometry(nodeIndex32, mesh, geometry, otherGeometry, geometryToBvh, cachedObb = null) {\n    let nodeIndex16 = nodeIndex32 * 2,\n        float32Array = _float32Array,\n        uint16Array = _uint16Array,\n        uint32Array = _uint32Array;\n\n    if (cachedObb === null) {\n      if (!otherGeometry.boundingBox) {\n        otherGeometry.computeBoundingBox();\n      }\n\n      obb.set(otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh);\n      cachedObb = obb;\n    }\n\n    const isLeaf = IS_LEAF(nodeIndex16, uint16Array);\n\n    if (isLeaf) {\n      const thisGeometry = geometry;\n      const thisIndex = thisGeometry.index;\n      const thisPos = thisGeometry.attributes.position;\n      const index = otherGeometry.index;\n      const pos = otherGeometry.attributes.position;\n      const offset = OFFSET(nodeIndex32, uint32Array);\n      const count = COUNT(nodeIndex16, uint16Array); // get the inverse of the geometry matrix so we can transform our triangles into the\n      // geometry space we're trying to test. We assume there are fewer triangles being checked\n      // here.\n\n      invertedMat.copy(geometryToBvh).invert();\n\n      if (otherGeometry.boundsTree) {\n        arrayToBox(BOUNDING_DATA_INDEX(nodeIndex32), float32Array, obb2);\n        obb2.matrix.copy(invertedMat);\n        obb2.needsUpdate = true;\n        cachedMesh.geometry = otherGeometry;\n        const res = otherGeometry.boundsTree.shapecast(cachedMesh, {\n          intersectsBounds: box => obb2.intersectsBox(box),\n          intersectsTriangle: tri => {\n            tri.a.applyMatrix4(geometryToBvh);\n            tri.b.applyMatrix4(geometryToBvh);\n            tri.c.applyMatrix4(geometryToBvh);\n            tri.needsUpdate = true;\n\n            for (let i = offset * 3, l = (count + offset) * 3; i < l; i += 3) {\n              // this triangle needs to be transformed into the current BVH coordinate frame\n              setTriangle(triangle2, i, thisIndex, thisPos);\n              triangle2.needsUpdate = true;\n\n              if (tri.intersectsTriangle(triangle2)) {\n                return true;\n              }\n            }\n\n            return false;\n          }\n        });\n        cachedMesh.geometry = null;\n        return res;\n      } else {\n        for (let i = offset * 3, l = count + offset * 3; i < l; i += 3) {\n          // this triangle needs to be transformed into the current BVH coordinate frame\n          setTriangle(triangle, i, thisIndex, thisPos);\n          triangle.a.applyMatrix4(invertedMat);\n          triangle.b.applyMatrix4(invertedMat);\n          triangle.c.applyMatrix4(invertedMat);\n          triangle.needsUpdate = true;\n\n          for (let i2 = 0, l2 = index.count; i2 < l2; i2 += 3) {\n            setTriangle(triangle2, i2, index, pos);\n            triangle2.needsUpdate = true;\n\n            if (triangle.intersectsTriangle(triangle2)) {\n              return true;\n            }\n          }\n        }\n      }\n    } else {\n      const left = nodeIndex32 + 8;\n      const right = uint32Array[nodeIndex32 + 6];\n      arrayToBox(BOUNDING_DATA_INDEX(left), float32Array, boundingBox);\n      const leftIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(left, mesh, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (leftIntersection) return true;\n      arrayToBox(BOUNDING_DATA_INDEX(right), float32Array, boundingBox);\n      const rightIntersection = cachedObb.intersectsBox(boundingBox) && intersectsGeometry(right, mesh, geometry, otherGeometry, geometryToBvh, cachedObb);\n      if (rightIntersection) return true;\n      return false;\n    }\n  };\n}();\n\nfunction intersectRay(nodeIndex32, array, ray, target) {\n  arrayToBox(nodeIndex32, array, boundingBox);\n  return ray.intersectBox(boundingBox, target);\n}\n\nconst bufferStack = [];\n\nlet _prevBuffer;\n\nlet _float32Array;\n\nlet _uint16Array;\n\nlet _uint32Array;\n\nexport function setBuffer(buffer) {\n  if (_prevBuffer) {\n    bufferStack.push(_prevBuffer);\n  }\n\n  _prevBuffer = buffer;\n  _float32Array = new Float32Array(buffer);\n  _uint16Array = new Uint16Array(buffer);\n  _uint32Array = new Uint32Array(buffer);\n}\nexport function clearBuffer() {\n  _prevBuffer = null;\n  _float32Array = null;\n  _uint16Array = null;\n  _uint32Array = null;\n\n  if (bufferStack.length) {\n    setBuffer(bufferStack.pop());\n  }\n}","map":{"version":3,"sources":["/Users/alisablakeney/coding/websites/longest-hum/client/node_modules/three-mesh-bvh/src/castFunctions.js"],"names":["Box3","Vector3","Mesh","Matrix4","intersectTris","intersectClosestTri","arrayToBox","OrientedBox","setTriangle","SeparatingAxisTriangle","CONTAINED","boundingBox","boxIntersection","xyzFields","IS_LEAF","n16","uint16Array","OFFSET","n32","uint32Array","COUNT","LEFT_NODE","RIGHT_NODE","SPLIT_AXIS","BOUNDING_DATA_INDEX","raycast","nodeIndex32","mesh","geometry","raycaster","ray","intersects","nodeIndex16","float32Array","_float32Array","_uint16Array","_uint32Array","isLeaf","offset","count","leftIndex","intersectRay","rightIndex","raycastFirst","splitAxis","xyzAxis","rayDir","direction","leftToRight","c1","c2","c1Intersection","c1Result","point","localPoint","isOutside","c2Intersection","c2Result","distance","shapecast","_box1","_box2","intersectsBoundsFunc","intersectsRangeFunc","nodeScoreFunc","nodeIndexByteOffset","depth","getLeftOffset","getRightEndOffset","left","right","score1","score2","box1","box2","temp","isC1Leaf","c1StopTraversal","end","isC2Leaf","c2StopTraversal","intersectsGeometry","triangle","triangle2","cachedMesh","invertedMat","obb","obb2","otherGeometry","geometryToBvh","cachedObb","computeBoundingBox","set","min","max","thisGeometry","thisIndex","index","thisPos","attributes","position","pos","copy","invert","boundsTree","matrix","needsUpdate","res","intersectsBounds","box","intersectsBox","intersectsTriangle","tri","a","applyMatrix4","b","c","i","l","i2","l2","leftIntersection","rightIntersection","array","target","intersectBox","bufferStack","_prevBuffer","setBuffer","buffer","push","Float32Array","Uint16Array","Uint32Array","clearBuffer","length","pop"],"mappings":"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","sourcesContent":["// For speed and readability this script is processed to replace the macro-like calls\n// with inline buffer reads. See generate-cast-functions.js.\nimport { Box3, Vector3, Mesh, Matrix4 } from 'three';\nimport { intersectTris, intersectClosestTri } from './Utils/RayIntersectTriUtilities.js';\nimport { arrayToBox } from './Utils/BufferNodeUtils.js';\n\nimport { OrientedBox } from './Utils/OrientedBox.js';\nimport { setTriangle } from './Utils/TriangleUtils.js';\nimport { SeparatingAxisTriangle } from './Utils/SeparatingAxisTriangle.js';\nimport { CONTAINED } from './Constants.js';\n\nconst boundingBox = new Box3();\nconst boxIntersection = new Vector3();\nconst xyzFields = [ 'x', 'y', 'z' ];\n\nfunction IS_LEAF( n16, uint16Array ) {\n\n\treturn uint16Array[ n16 + 15 ] === 0xFFFF;\n\n}\n\nfunction OFFSET( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nfunction COUNT( n32, uint16Array ) {\n\n\treturn uint16Array[ n32 + 14 ];\n\n}\n\nfunction LEFT_NODE( n32 ) {\n\n\treturn n32 + 8;\n\n}\n\nfunction RIGHT_NODE( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 6 ];\n\n}\n\nfunction SPLIT_AXIS( n32, uint32Array ) {\n\n\treturn uint32Array[ n32 + 7 ];\n\n}\n\nfunction BOUNDING_DATA_INDEX( n32 ) {\n\n\treturn n32;\n\n}\n\nexport function raycast( nodeIndex32, mesh, geometry, raycaster, ray, intersects ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\tintersectTris( mesh, geometry, raycaster, ray, offset, count, intersects );\n\n\t} else {\n\n\t\tconst leftIndex = LEFT_NODE( nodeIndex32 );\n\t\tif ( intersectRay( leftIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( leftIndex, mesh, geometry, raycaster, ray, intersects );\n\n\t\t}\n\n\t\tconst rightIndex = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\tif ( intersectRay( rightIndex, float32Array, ray, boxIntersection ) ) {\n\n\t\t\traycast( rightIndex, mesh, geometry, raycaster, ray, intersects );\n\n\t\t}\n\n\t}\n\n}\n\nexport function raycastFirst( nodeIndex32, mesh, geometry, raycaster, ray ) {\n\n\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\tif ( isLeaf ) {\n\n\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\treturn intersectClosestTri( mesh, geometry, raycaster, ray, offset, count );\n\n\t} else {\n\n\t\t// consider the position of the split plane with respect to the oncoming ray; whichever direction\n\t\t// the ray is coming from, look for an intersection among that side of the tree first\n\t\tconst splitAxis = SPLIT_AXIS( nodeIndex32, uint32Array );\n\t\tconst xyzAxis = xyzFields[ splitAxis ];\n\t\tconst rayDir = ray.direction[ xyzAxis ];\n\t\tconst leftToRight = rayDir >= 0;\n\n\t\t// c1 is the child to check first\n\t\tlet c1, c2;\n\t\tif ( leftToRight ) {\n\n\t\t\tc1 = LEFT_NODE( nodeIndex32 );\n\t\t\tc2 = RIGHT_NODE( nodeIndex32, uint32Array );\n\n\t\t} else {\n\n\t\t\tc1 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tc2 = LEFT_NODE( nodeIndex32 );\n\n\t\t}\n\n\t\tconst c1Intersection = intersectRay( c1, float32Array, ray, boxIntersection );\n\t\tconst c1Result = c1Intersection ? raycastFirst( c1, mesh, geometry, raycaster, ray ) : null;\n\n\t\t// if we got an intersection in the first node and it's closer than the second node's bounding\n\t\t// box, we don't need to consider the second node because it couldn't possibly be a better result\n\t\tif ( c1Result ) {\n\n\t\t\t// check if the point is within the second bounds\n\t\t\tconst point = c1Result.localPoint[ xyzAxis ];\n\t\t\tconst isOutside = leftToRight ?\n\t\t\t\tpoint <= float32Array[ c2 + splitAxis ] : // min bounding data\n\t\t\t\tpoint >= float32Array[ c2 + splitAxis + 3 ]; // max bounding data\n\n\t\t\tif ( isOutside ) {\n\n\t\t\t\treturn c1Result;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// either there was no intersection in the first node, or there could still be a closer\n\t\t// intersection in the second, so check the second node and then take the better of the two\n\t\tconst c2Intersection = intersectRay( c2, float32Array, ray, boxIntersection );\n\t\tconst c2Result = c2Intersection ? raycastFirst( c2, mesh, geometry, raycaster, ray ) : null;\n\n\t\tif ( c1Result && c2Result ) {\n\n\t\t\treturn c1Result.distance <= c2Result.distance ? c1Result : c2Result;\n\n\t\t} else {\n\n\t\t\treturn c1Result || c2Result || null;\n\n\t\t}\n\n\t}\n\n}\n\nexport const shapecast = ( function () {\n\n\tconst _box1 = new Box3();\n\tconst _box2 = new Box3();\n\n\treturn function shapecast(\n\t\tnodeIndex32,\n\t\tgeometry,\n\t\tintersectsBoundsFunc,\n\t\tintersectsRangeFunc,\n\t\tnodeScoreFunc = null,\n\t\tnodeIndexByteOffset = 0, // offset for unique node identifier\n\t\tdepth = 0\n\t) {\n\n\t\t// Define these inside the function so it has access to the local variables needed\n\t\t// when converting to the buffer equivalents\n\t\tfunction getLeftOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\tnodeIndex32 = LEFT_NODE( nodeIndex32 );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\treturn OFFSET( nodeIndex32, uint32Array );\n\n\t\t}\n\n\t\tfunction getRightEndOffset( nodeIndex32 ) {\n\n\t\t\tlet nodeIndex16 = nodeIndex32 * 2, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\t\t// traverse until we find a leaf\n\t\t\twhile ( ! IS_LEAF( nodeIndex16, uint16Array ) ) {\n\n\t\t\t\t// adjust offset to point to the right node\n\t\t\t\tnodeIndex32 = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\t\tnodeIndex16 = nodeIndex32 * 2;\n\n\t\t\t}\n\n\t\t\t// return the end offset of the triangle range\n\t\t\treturn OFFSET( nodeIndex32, uint32Array ) + COUNT( nodeIndex16, uint16Array );\n\n\t\t}\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\t\t\treturn intersectsRangeFunc( offset, count, false, depth, nodeIndexByteOffset + nodeIndex32 );\n\n\t\t} else {\n\n\t\t\tconst left = LEFT_NODE( nodeIndex32 );\n\t\t\tconst right = RIGHT_NODE( nodeIndex32, uint32Array );\n\t\t\tlet c1 = left;\n\t\t\tlet c2 = right;\n\n\t\t\tlet score1, score2;\n\t\t\tlet box1, box2;\n\t\t\tif ( nodeScoreFunc ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tbox2 = _box2;\n\n\t\t\t\t// bounding data is not offset\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\t\tscore1 = nodeScoreFunc( box1 );\n\t\t\t\tscore2 = nodeScoreFunc( box2 );\n\n\t\t\t\tif ( score2 < score1 ) {\n\n\t\t\t\t\tc1 = right;\n\t\t\t\t\tc2 = left;\n\n\t\t\t\t\tconst temp = score1;\n\t\t\t\t\tscore1 = score2;\n\t\t\t\t\tscore2 = temp;\n\n\t\t\t\t\tbox1 = box2;\n\t\t\t\t\t// box2 is always set before use below\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Check box 1 intersection\n\t\t\tif ( ! box1 ) {\n\n\t\t\t\tbox1 = _box1;\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c1 ), float32Array, box1 );\n\n\t\t\t}\n\n\t\t\tconst isC1Leaf = IS_LEAF( c1 * 2, uint16Array );\n\t\t\tconst c1Intersection = intersectsBoundsFunc( box1, isC1Leaf, score1, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\tlet c1StopTraversal;\n\t\t\tif ( c1Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c1 );\n\t\t\t\tconst end = getRightEndOffset( c1 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc1StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c1 );\n\n\t\t\t} else {\n\n\t\t\t\tc1StopTraversal =\n\t\t\t\t\tc1Intersection &&\n\t\t\t\t\tshapecast(\n\t\t\t\t\t\tc1,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c1StopTraversal ) return true;\n\n\t\t\t// Check box 2 intersection\n\t\t\t// cached box2 will have been overwritten by previous traversal\n\t\t\tbox2 = _box2;\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( c2 ), float32Array, box2 );\n\n\t\t\tconst isC2Leaf = IS_LEAF( c2 * 2, uint16Array );\n\t\t\tconst c2Intersection = intersectsBoundsFunc( box2, isC2Leaf, score2, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\tlet c2StopTraversal;\n\t\t\tif ( c2Intersection === CONTAINED ) {\n\n\t\t\t\tconst offset = getLeftOffset( c2 );\n\t\t\t\tconst end = getRightEndOffset( c2 );\n\t\t\t\tconst count = end - offset;\n\n\t\t\t\tc2StopTraversal = intersectsRangeFunc( offset, count, true, depth + 1, nodeIndexByteOffset + c2 );\n\n\t\t\t} else {\n\n\t\t\t\tc2StopTraversal =\n\t\t\t\t\tc2Intersection &&\n\t\t\t\t\tshapecast(\n\t\t\t\t\t\tc2,\n\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\tintersectsBoundsFunc,\n\t\t\t\t\t\tintersectsRangeFunc,\n\t\t\t\t\t\tnodeScoreFunc,\n\t\t\t\t\t\tnodeIndexByteOffset,\n\t\t\t\t\t\tdepth + 1\n\t\t\t\t\t);\n\n\t\t\t}\n\n\t\t\tif ( c2StopTraversal ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n} )();\n\nexport const intersectsGeometry = ( function () {\n\n\tconst triangle = new SeparatingAxisTriangle();\n\tconst triangle2 = new SeparatingAxisTriangle();\n\tconst cachedMesh = new Mesh();\n\tconst invertedMat = new Matrix4();\n\n\tconst obb = new OrientedBox();\n\tconst obb2 = new OrientedBox();\n\n\treturn function intersectsGeometry( nodeIndex32, mesh, geometry, otherGeometry, geometryToBvh, cachedObb = null ) {\n\n\t\tlet nodeIndex16 = nodeIndex32 * 2, float32Array = _float32Array, uint16Array = _uint16Array, uint32Array = _uint32Array;\n\n\t\tif ( cachedObb === null ) {\n\n\t\t\tif ( ! otherGeometry.boundingBox ) {\n\n\t\t\t\totherGeometry.computeBoundingBox();\n\n\t\t\t}\n\n\t\t\tobb.set( otherGeometry.boundingBox.min, otherGeometry.boundingBox.max, geometryToBvh );\n\t\t\tcachedObb = obb;\n\n\t\t}\n\n\t\tconst isLeaf = IS_LEAF( nodeIndex16, uint16Array );\n\t\tif ( isLeaf ) {\n\n\t\t\tconst thisGeometry = geometry;\n\t\t\tconst thisIndex = thisGeometry.index;\n\t\t\tconst thisPos = thisGeometry.attributes.position;\n\n\t\t\tconst index = otherGeometry.index;\n\t\t\tconst pos = otherGeometry.attributes.position;\n\n\t\t\tconst offset = OFFSET( nodeIndex32, uint32Array );\n\t\t\tconst count = COUNT( nodeIndex16, uint16Array );\n\n\t\t\t// get the inverse of the geometry matrix so we can transform our triangles into the\n\t\t\t// geometry space we're trying to test. We assume there are fewer triangles being checked\n\t\t\t// here.\n\t\t\tinvertedMat.copy( geometryToBvh ).invert();\n\n\t\t\tif ( otherGeometry.boundsTree ) {\n\n\t\t\t\tarrayToBox( BOUNDING_DATA_INDEX( nodeIndex32 ), float32Array, obb2 );\n\t\t\t\tobb2.matrix.copy( invertedMat );\n\t\t\t\tobb2.needsUpdate = true;\n\n\t\t\t\tcachedMesh.geometry = otherGeometry;\n\t\t\t\tconst res = otherGeometry.boundsTree.shapecast( cachedMesh, {\n\n\t\t\t\t\tintersectsBounds: box => obb2.intersectsBox( box ),\n\n\t\t\t\t\tintersectsTriangle: tri => {\n\n\t\t\t\t\t\ttri.a.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.b.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.c.applyMatrix4( geometryToBvh );\n\t\t\t\t\t\ttri.needsUpdate = true;\n\n\t\t\t\t\t\tfor ( let i = offset * 3, l = ( count + offset ) * 3; i < l; i += 3 ) {\n\n\t\t\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\t\t\tsetTriangle( triangle2, i, thisIndex, thisPos );\n\t\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\t\t\t\t\t\t\tif ( tri.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tcachedMesh.geometry = null;\n\n\t\t\t\treturn res;\n\n\t\t\t} else {\n\n\t\t\t\tfor ( let i = offset * 3, l = ( count + offset * 3 ); i < l; i += 3 ) {\n\n\t\t\t\t\t// this triangle needs to be transformed into the current BVH coordinate frame\n\t\t\t\t\tsetTriangle( triangle, i, thisIndex, thisPos );\n\t\t\t\t\ttriangle.a.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.b.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.c.applyMatrix4( invertedMat );\n\t\t\t\t\ttriangle.needsUpdate = true;\n\n\t\t\t\t\tfor ( let i2 = 0, l2 = index.count; i2 < l2; i2 += 3 ) {\n\n\t\t\t\t\t\tsetTriangle( triangle2, i2, index, pos );\n\t\t\t\t\t\ttriangle2.needsUpdate = true;\n\n\t\t\t\t\t\tif ( triangle.intersectsTriangle( triangle2 ) ) {\n\n\t\t\t\t\t\t\treturn true;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tconst left = nodeIndex32 + 8;\n\t\t\tconst right = uint32Array[ nodeIndex32 + 6 ];\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( left ), float32Array, boundingBox );\n\t\t\tconst leftIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( left, mesh, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( leftIntersection ) return true;\n\n\t\t\tarrayToBox( BOUNDING_DATA_INDEX( right ), float32Array, boundingBox );\n\t\t\tconst rightIntersection =\n\t\t\t\tcachedObb.intersectsBox( boundingBox ) &&\n\t\t\t\tintersectsGeometry( right, mesh, geometry, otherGeometry, geometryToBvh, cachedObb );\n\n\t\t\tif ( rightIntersection ) return true;\n\n\t\t\treturn false;\n\n\t\t}\n\n\t};\n\n} )();\n\nfunction intersectRay( nodeIndex32, array, ray, target ) {\n\n\tarrayToBox( nodeIndex32, array, boundingBox );\n\treturn ray.intersectBox( boundingBox, target );\n\n}\n\nconst bufferStack = [];\nlet _prevBuffer;\nlet _float32Array;\nlet _uint16Array;\nlet _uint32Array;\nexport function setBuffer( buffer ) {\n\n\tif ( _prevBuffer ) {\n\n\t\tbufferStack.push( _prevBuffer );\n\n\t}\n\n\t_prevBuffer = buffer;\n\t_float32Array = new Float32Array( buffer );\n\t_uint16Array = new Uint16Array( buffer );\n\t_uint32Array = new Uint32Array( buffer );\n\n}\n\nexport function clearBuffer() {\n\n\t_prevBuffer = null;\n\t_float32Array = null;\n\t_uint16Array = null;\n\t_uint32Array = null;\n\n\tif ( bufferStack.length ) {\n\n\t\tsetBuffer( bufferStack.pop() );\n\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}