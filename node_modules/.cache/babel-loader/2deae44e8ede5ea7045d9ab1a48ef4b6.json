{"ast":null,"code":"// Returns a Float32Array representing the bounds data for box.\nexport function boxToArray(bx) {\n  const arr = new Float32Array(6);\n  arr[0] = bx.min.x;\n  arr[1] = bx.min.y;\n  arr[2] = bx.min.z;\n  arr[3] = bx.max.x;\n  arr[4] = bx.max.y;\n  arr[5] = bx.max.z;\n  return arr;\n}\nexport function arrayToBox(arr, target) {\n  target.min.x = arr[0];\n  target.min.y = arr[1];\n  target.min.z = arr[2];\n  target.max.x = arr[3];\n  target.max.y = arr[4];\n  target.max.z = arr[5];\n  return target;\n}\nexport function getLongestEdgeIndex(bounds) {\n  let splitDimIdx = -1;\n  let splitDist = -Infinity;\n\n  for (let i = 0; i < 3; i++) {\n    const dist = bounds[i + 3] - bounds[i];\n\n    if (dist > splitDist) {\n      splitDist = dist;\n      splitDimIdx = i;\n    }\n  }\n\n  return splitDimIdx;\n} // copys bounds a into bounds b\n\nexport function copyBounds(source, target) {\n  target.set(source);\n} // sets bounds target to the union of bounds a and b\n\nexport function unionBounds(a, b, target) {\n  let aVal, bVal;\n\n  for (let d = 0; d < 3; d++) {\n    const d3 = d + 3; // set the minimum values\n\n    aVal = a[d];\n    bVal = b[d];\n    target[d] = aVal < bVal ? aVal : bVal; // set the max values\n\n    aVal = a[d3];\n    bVal = b[d3];\n    target[d3] = aVal > bVal ? aVal : bVal;\n  }\n} // compute bounds surface area\n\nexport function computeSurfaceArea(bounds) {\n  const d0 = bounds[3] - bounds[0];\n  const d1 = bounds[4] - bounds[1];\n  const d2 = bounds[5] - bounds[2];\n  return 2 * (d0 * d1 + d1 * d2 + d2 * d0);\n}","map":{"version":3,"sources":["/Users/alisablakeney/coding/websites/longest-hum/client/node_modules/three-mesh-bvh/src/Utils/ArrayBoxUtilities.js"],"names":["boxToArray","bx","arr","Float32Array","min","x","y","z","max","arrayToBox","target","getLongestEdgeIndex","bounds","splitDimIdx","splitDist","Infinity","i","dist","copyBounds","source","set","unionBounds","a","b","aVal","bVal","d","d3","computeSurfaceArea","d0","d1","d2"],"mappings":"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","sourcesContent":["// Returns a Float32Array representing the bounds data for box.\r\nexport function boxToArray( bx ) {\r\n\r\n\tconst arr = new Float32Array( 6 );\r\n\r\n\tarr[ 0 ] = bx.min.x;\r\n\tarr[ 1 ] = bx.min.y;\r\n\tarr[ 2 ] = bx.min.z;\r\n\r\n\tarr[ 3 ] = bx.max.x;\r\n\tarr[ 4 ] = bx.max.y;\r\n\tarr[ 5 ] = bx.max.z;\r\n\r\n\treturn arr;\r\n\r\n}\r\n\r\nexport function arrayToBox( arr, target ) {\r\n\r\n\ttarget.min.x = arr[ 0 ];\r\n\ttarget.min.y = arr[ 1 ];\r\n\ttarget.min.z = arr[ 2 ];\r\n\r\n\ttarget.max.x = arr[ 3 ];\r\n\ttarget.max.y = arr[ 4 ];\r\n\ttarget.max.z = arr[ 5 ];\r\n\r\n\treturn target;\r\n\r\n}\r\n\r\nexport function getLongestEdgeIndex( bounds ) {\r\n\r\n\tlet splitDimIdx = - 1;\r\n\tlet splitDist = - Infinity;\r\n\r\n\tfor ( let i = 0; i < 3; i ++ ) {\r\n\r\n\t\tconst dist = bounds[ i + 3 ] - bounds[ i ];\r\n\t\tif ( dist > splitDist ) {\r\n\r\n\t\t\tsplitDist = dist;\r\n\t\t\tsplitDimIdx = i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn splitDimIdx;\r\n\r\n}\r\n\r\n// copys bounds a into bounds b\r\nexport function copyBounds( source, target ) {\r\n\r\n\ttarget.set( source );\r\n\r\n}\r\n\r\n// sets bounds target to the union of bounds a and b\r\nexport function unionBounds( a, b, target ) {\r\n\r\n\tlet aVal, bVal;\r\n\tfor ( let d = 0; d < 3; d ++ ) {\r\n\r\n\t\tconst d3 = d + 3;\r\n\r\n\t\t// set the minimum values\r\n\t\taVal = a[ d ];\r\n\t\tbVal = b[ d ];\r\n\t\ttarget[ d ] = aVal < bVal ? aVal : bVal;\r\n\r\n\t\t// set the max values\r\n\t\taVal = a[ d3 ];\r\n\t\tbVal = b[ d3 ];\r\n\t\ttarget[ d3 ] = aVal > bVal ? aVal : bVal;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// compute bounds surface area\r\nexport function computeSurfaceArea( bounds ) {\r\n\r\n\tconst d0 = bounds[ 3 ] - bounds[ 0 ];\r\n\tconst d1 = bounds[ 4 ] - bounds[ 1 ];\r\n\tconst d2 = bounds[ 5 ] - bounds[ 2 ];\r\n\r\n\treturn 2 * ( d0 * d1 + d1 * d2 + d2 * d0 );\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}