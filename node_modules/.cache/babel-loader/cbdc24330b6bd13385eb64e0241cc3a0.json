{"ast":null,"code":"import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  controls\n}, ref) => {\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    const currControls = defaultControls || (controls == null ? void 0 : controls.current);\n\n    const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n    currControls == null ? void 0 : currControls.addEventListener('change', callback);\n    return () => void (currControls == null ? void 0 : currControls.removeEventListener('change', callback)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controls, defaultControls]);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\nexport { CameraShake };","map":{"version":3,"sources":["/Users/alisablakeney/coding/websites/longest-hum/client/node_modules/@react-three/drei/core/CameraShake.js"],"names":["React","useThree","useFrame","SimplexNoise","CameraShake","forwardRef","intensity","decay","decayRate","maxYaw","maxPitch","maxRoll","yawFrequency","pitchFrequency","rollFrequency","controls","ref","camera","state","defaultControls","intensityRef","useRef","initialRotation","rotation","clone","yawNoise","useState","pitchNoise","rollNoise","constrainIntensity","current","useImperativeHandle","getIntensity","setIntensity","val","useEffect","currControls","callback","addEventListener","removeEventListener","clock","delta","shake","Math","pow","yaw","noise","elapsedTime","pitch","roll","set","x","y","z"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useThree, useFrame } from '@react-three/fiber';\nimport { SimplexNoise } from 'three-stdlib';\n\nconst CameraShake = /*#__PURE__*/React.forwardRef(({\n  intensity = 1,\n  decay,\n  decayRate = 0.65,\n  maxYaw = 0.1,\n  maxPitch = 0.1,\n  maxRoll = 0.1,\n  yawFrequency = 1,\n  pitchFrequency = 1,\n  rollFrequency = 1,\n  controls\n}, ref) => {\n  const camera = useThree(state => state.camera); // @ts-expect-error new in @react-three/fiber@7.0.5\n\n  const defaultControls = useThree(state => state.controls);\n  const intensityRef = React.useRef(intensity);\n  const initialRotation = React.useRef(camera.rotation.clone());\n  const [yawNoise] = React.useState(() => new SimplexNoise());\n  const [pitchNoise] = React.useState(() => new SimplexNoise());\n  const [rollNoise] = React.useState(() => new SimplexNoise());\n\n  const constrainIntensity = () => {\n    if (intensityRef.current < 0 || intensityRef.current > 1) {\n      intensityRef.current = intensityRef.current < 0 ? 0 : 1;\n    }\n  };\n\n  React.useImperativeHandle(ref, () => ({\n    getIntensity: () => intensityRef.current,\n    setIntensity: val => {\n      intensityRef.current = val;\n      constrainIntensity();\n    }\n  }), []);\n  React.useEffect(() => {\n    const currControls = defaultControls || (controls == null ? void 0 : controls.current);\n\n    const callback = () => void (initialRotation.current = camera.rotation.clone());\n\n    currControls == null ? void 0 : currControls.addEventListener('change', callback);\n    return () => void (currControls == null ? void 0 : currControls.removeEventListener('change', callback)); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [controls, defaultControls]);\n  useFrame(({\n    clock\n  }, delta) => {\n    const shake = Math.pow(intensityRef.current, 2);\n    const yaw = maxYaw * shake * yawNoise.noise(clock.elapsedTime * yawFrequency, 1);\n    const pitch = maxPitch * shake * pitchNoise.noise(clock.elapsedTime * pitchFrequency, 1);\n    const roll = maxRoll * shake * rollNoise.noise(clock.elapsedTime * rollFrequency, 1);\n    camera.rotation.set(initialRotation.current.x + pitch, initialRotation.current.y + yaw, initialRotation.current.z + roll);\n\n    if (decay && intensityRef.current > 0) {\n      intensityRef.current -= decayRate * delta;\n      constrainIntensity();\n    }\n  });\n  return null;\n});\n\nexport { CameraShake };\n"]},"metadata":{},"sourceType":"module"}