{"ast":null,"code":"import { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../Constants.js'; // https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\n\nfunction getPrimitiveSize(el) {\n  switch (typeof el) {\n    case 'number':\n      return 8;\n\n    case 'string':\n      return el.length * 2;\n\n    case 'boolean':\n      return 4;\n\n    default:\n      return 0;\n  }\n}\n\nfunction isTypedArray(arr) {\n  const regex = /(Uint|Int|Float)(8|16|32)Array/;\n  return regex.test(arr.constructor.name);\n}\n\nfunction getRootExtremes(bvh, group) {\n  const result = {\n    get total() {\n      console.warn('getRootExtremes: \"total\" has been replaced by \"nodeCount\" and will be removed in the next release.');\n      return this.nodeCount;\n    },\n\n    nodeCount: 0,\n    leafNodeCount: 0,\n    depth: {\n      min: Infinity,\n      max: -Infinity\n    },\n    tris: {\n      min: Infinity,\n      max: -Infinity\n    },\n    splits: [0, 0, 0],\n    surfaceAreaScore: 0\n  };\n  bvh.traverse((depth, isLeaf, boundingData, offsetOrSplit, count) => {\n    const l0 = boundingData[0 + 3] - boundingData[0];\n    const l1 = boundingData[1 + 3] - boundingData[1];\n    const l2 = boundingData[2 + 3] - boundingData[2];\n    const surfaceArea = 2 * (l0 * l1 + l1 * l2 + l2 * l0);\n    result.nodeCount++;\n\n    if (isLeaf) {\n      result.leafNodeCount++;\n      result.depth.min = Math.min(depth, result.depth.min);\n      result.depth.max = Math.max(depth, result.depth.max);\n      result.tris.min = Math.min(count, result.tris.min);\n      result.tris.max = Math.max(count, result.tris.max);\n      result.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\n    } else {\n      result.splits[offsetOrSplit]++;\n      result.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\n    }\n  }, group); // If there are no leaf nodes because the tree hasn't finished generating yet.\n\n  if (result.tris.min === Infinity) {\n    result.tris.min = 0;\n    result.tris.max = 0;\n  }\n\n  if (result.depth.min === Infinity) {\n    result.depth.min = 0;\n    result.depth.max = 0;\n  }\n\n  return result;\n}\n\nfunction getBVHExtremes(bvh) {\n  return bvh._roots.map((root, i) => getRootExtremes(bvh, i));\n}\n\nfunction estimateMemoryInBytes(obj) {\n  const traversed = new Set();\n  const stack = [obj];\n  let bytes = 0;\n\n  while (stack.length) {\n    const curr = stack.pop();\n\n    if (traversed.has(curr)) {\n      continue;\n    }\n\n    traversed.add(curr);\n\n    for (let key in curr) {\n      if (!curr.hasOwnProperty(key)) {\n        continue;\n      }\n\n      bytes += getPrimitiveSize(key);\n      const value = curr[key];\n\n      if (value && (typeof value === 'object' || typeof value === 'function')) {\n        if (isTypedArray(value)) {\n          bytes += value.byteLength;\n        } else if (value instanceof ArrayBuffer) {\n          bytes += value.byteLength;\n        } else {\n          stack.push(value);\n        }\n      } else {\n        bytes += getPrimitiveSize(value);\n      }\n    }\n  }\n\n  return bytes;\n}\n\nexport { estimateMemoryInBytes, getBVHExtremes };","map":{"version":3,"sources":["/Users/alisablakeney/coding/websites/longest-hum/client/node_modules/three-mesh-bvh/src/Utils/Debug.js"],"names":["TRAVERSAL_COST","TRIANGLE_INTERSECT_COST","getPrimitiveSize","el","length","isTypedArray","arr","regex","test","constructor","name","getRootExtremes","bvh","group","result","total","console","warn","nodeCount","leafNodeCount","depth","min","Infinity","max","tris","splits","surfaceAreaScore","traverse","isLeaf","boundingData","offsetOrSplit","count","l0","l1","l2","surfaceArea","Math","getBVHExtremes","_roots","map","root","i","estimateMemoryInBytes","obj","traversed","Set","stack","bytes","curr","pop","has","add","key","hasOwnProperty","value","byteLength","ArrayBuffer","push"],"mappings":"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","sourcesContent":["import { TRAVERSAL_COST, TRIANGLE_INTERSECT_COST } from '../Constants.js';\r\n\r\n// https://stackoverflow.com/questions/1248302/how-to-get-the-size-of-a-javascript-object\r\nfunction getPrimitiveSize( el ) {\r\n\r\n\tswitch ( typeof el ) {\r\n\r\n\t\tcase 'number':\r\n\t\t\treturn 8;\r\n\t\tcase 'string':\r\n\t\t\treturn el.length * 2;\r\n\t\tcase 'boolean':\r\n\t\t\treturn 4;\r\n\t\tdefault:\r\n\t\t\treturn 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction isTypedArray( arr ) {\r\n\r\n\tconst regex = /(Uint|Int|Float)(8|16|32)Array/;\r\n\treturn regex.test( arr.constructor.name );\r\n\r\n}\r\n\r\nfunction getRootExtremes( bvh, group ) {\r\n\r\n\tconst result = {\r\n\t\tget total() {\r\n\r\n\t\t\tconsole.warn( 'getRootExtremes: \"total\" has been replaced by \"nodeCount\" and will be removed in the next release.' );\r\n\t\t\treturn this.nodeCount;\r\n\r\n\t\t},\r\n\t\tnodeCount: 0,\r\n\t\tleafNodeCount: 0,\r\n\r\n\t\tdepth: {\r\n\t\t\tmin: Infinity, max: - Infinity\r\n\t\t},\r\n\t\ttris: {\r\n\t\t\tmin: Infinity, max: - Infinity\r\n\t\t},\r\n\t\tsplits: [ 0, 0, 0 ],\r\n\t\tsurfaceAreaScore: 0,\r\n\t};\r\n\r\n\tbvh.traverse( ( depth, isLeaf, boundingData, offsetOrSplit, count ) => {\r\n\r\n\t\tconst l0 = boundingData[ 0 + 3 ] - boundingData[ 0 ];\r\n\t\tconst l1 = boundingData[ 1 + 3 ] - boundingData[ 1 ];\r\n\t\tconst l2 = boundingData[ 2 + 3 ] - boundingData[ 2 ];\r\n\r\n\t\tconst surfaceArea = 2 * ( l0 * l1 + l1 * l2 + l2 * l0 );\r\n\r\n\t\tresult.nodeCount ++;\r\n\t\tif ( isLeaf ) {\r\n\r\n\t\t\tresult.leafNodeCount ++;\r\n\r\n\t\t\tresult.depth.min = Math.min( depth, result.depth.min );\r\n\t\t\tresult.depth.max = Math.max( depth, result.depth.max );\r\n\r\n\t\t\tresult.tris.min = Math.min( count, result.tris.min );\r\n\t\t\tresult.tris.max = Math.max( count, result.tris.max );\r\n\r\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRIANGLE_INTERSECT_COST * count;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tresult.splits[ offsetOrSplit ] ++;\r\n\r\n\t\t\tresult.surfaceAreaScore += surfaceArea * TRAVERSAL_COST;\r\n\r\n\t\t}\r\n\r\n\t}, group );\r\n\r\n\t// If there are no leaf nodes because the tree hasn't finished generating yet.\r\n\tif ( result.tris.min === Infinity ) {\r\n\r\n\t\tresult.tris.min = 0;\r\n\t\tresult.tris.max = 0;\r\n\r\n\t}\r\n\r\n\tif ( result.depth.min === Infinity ) {\r\n\r\n\t\tresult.depth.min = 0;\r\n\t\tresult.depth.max = 0;\r\n\r\n\t}\r\n\r\n\treturn result;\r\n\r\n}\r\n\r\nfunction getBVHExtremes( bvh ) {\r\n\r\n\treturn bvh._roots.map( ( root, i ) => getRootExtremes( bvh, i ) );\r\n\r\n}\r\n\r\nfunction estimateMemoryInBytes( obj ) {\r\n\r\n\tconst traversed = new Set();\r\n\tconst stack = [ obj ];\r\n\tlet bytes = 0;\r\n\r\n\twhile ( stack.length ) {\r\n\r\n\t\tconst curr = stack.pop();\r\n\t\tif ( traversed.has( curr ) ) {\r\n\r\n\t\t\tcontinue;\r\n\r\n\t\t}\r\n\r\n\t\ttraversed.add( curr );\r\n\r\n\t\tfor ( let key in curr ) {\r\n\r\n\t\t\tif ( ! curr.hasOwnProperty( key ) ) {\r\n\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbytes += getPrimitiveSize( key );\r\n\r\n\t\t\tconst value = curr[ key ];\r\n\t\t\tif ( value && ( typeof value === 'object' || typeof value === 'function' ) ) {\r\n\r\n\t\t\t\tif ( isTypedArray( value ) ) {\r\n\r\n\t\t\t\t\tbytes += value.byteLength;\r\n\r\n\t\t\t\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\t\t\t\tbytes += value.byteLength;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tstack.push( value );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbytes += getPrimitiveSize( value );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn bytes;\r\n\r\n}\r\n\r\nexport { estimateMemoryInBytes, getBVHExtremes };\r\n"]},"metadata":{},"sourceType":"module"}